# This GitHub workflow tests and validates Terraform config (ML resource config and more)
# defined under mlops-poc/terraform, when PRs are merged into the main branch
name: Terraform Tests for mlops-poc

on:
  workflow_dispatch:
  pull_request_target:
    paths:
      - "mlops-poc/terraform/**"

permissions:
  contents: read
  pages: write
  id-token: write

defaults:
  run:
    working-directory: ./mlops-poc/terraform

# Code reference can be found at https://github.com/hashicorp/setup-terraform
jobs:
  staging:
    concurrency: mlops-poc-staging-terraform-job
    runs-on: ubuntu-20.04
    env:
      DATABRICKS_HOST: https://adb-1778171230779412.12.azuredatabricks.net
      ARM_CLIENT_ID: ${{ secrets.stagingAzureSpApplicationId }}
      ARM_TENANT_ID: ${{ secrets.stagingAzureSpTenantId }}
      ARM_CLIENT_SECRET: ${{ secrets.stagingAzureSpClientSecret }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
      - name: GET Databricks AAD Token
        run: |
          DATABRICKS_TOKEN=$(curl --fail -X POST -H 'Content-Type: application/x-www-form-urlencoded' \
                                              "https://login.microsoftonline.com/${{ secrets.stagingAzureSpTenantId }}/oauth2/v2.0/token" \
                                              -d "client_id=${{ secrets.stagingAzureSpApplicationId }}" \
                                              -d 'grant_type=client_credentials' \
                                              -d 'scope=2ff814a6-3304-4ab8-85cb-cd0e6f879c1d%2F.default' \
                                              -d "client_secret=${{ secrets.stagingAzureSpClientSecret }}" |  jq -r  '.access_token')
          echo "DATABRICKS_TOKEN=$DATABRICKS_TOKEN" >> "$GITHUB_ENV"
      - uses: hashicorp/setup-terraform@v1
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check -recursive -diff
        continue-on-error: true
      - name: Configure Terraform state backend authentication
        run: |
          # Below we assume you've run the setup scripts under the cicd-setup-scripts directory
          # to create an Azure storage container and store its associated Azure ARM key as a Github Actions secret with
          # name ARM_ACCESS_KEY. We set the ARM_ACCESS_KEY environment variable to authenticate to the azurerm
          # backend as described in https://www.terraform.io/language/settings/backends/azurerm
          echo "ARM_ACCESS_KEY=${{secrets.ARM_ACCESS_KEY}}" >> "$GITHUB_ENV"
      - name: Terraform Init
        id: init
        run: terraform -chdir=staging init
      - name: Terraform Validate
        id: validate
        run: terraform -chdir=staging validate -no-color
      - name: Terraform Plan
        id: plan
        run: |
          terraform -chdir=staging plan -no-color \
          -var="git_repo_url=${{ github.server_url }}/${{ github.repository }}"
      - name: Create Comment with Terraform Plan
        uses: actions/github-script@v6
        id: comment
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Staging Format and Style 🖌 \`${{ steps.fmt.outcome }}\`
            #### Terraform Staging Initialization ⚙️ \`${{ steps.init.outcome }}\`
            #### Terraform Staging Validation 🤖 \`${{ steps.validate.outcome }}\`
            <details><summary>Staging Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Staging Plan 📖 \`${{ steps.plan.outcome }}\`

            <details><summary>Show Staging Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>`

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
  prod:
    concurrency: mlops-poc-prod-terraform-job
    runs-on: ubuntu-20.04
    env:
      DATABRICKS_HOST: https://adb-8569209645075352.12.azuredatabricks.net
      ARM_CLIENT_ID: ${{ secrets.prodAzureSpApplicationId }}
      ARM_TENANT_ID: ${{ secrets.prodAzureSpTenantId }}
      ARM_CLIENT_SECRET: ${{ secrets.prodAzureSpClientSecret }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
      - name: GET Databricks AAD Token
        run: |
          DATABRICKS_TOKEN=$(curl --fail -X POST -H 'Content-Type: application/x-www-form-urlencoded' \
                                              "https://login.microsoftonline.com/${{ secrets.prodAzureSpTenantId }}/oauth2/v2.0/token" \
                                              -d "client_id=${{ secrets.prodAzureSpApplicationId }}" \
                                              -d 'grant_type=client_credentials' \
                                              -d 'scope=2ff814a6-3304-4ab8-85cb-cd0e6f879c1d%2F.default' \
                                              -d "client_secret=${{ secrets.prodAzureSpClientSecret }}" |  jq -r  '.access_token')
          echo "DATABRICKS_TOKEN=$DATABRICKS_TOKEN" >> "$GITHUB_ENV"
      - name: "Az CLI login"
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.prodAzureSpApplicationId }}
          tenant-id: ${{ secrets.prodAzureSpTenantId }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - uses: hashicorp/setup-terraform@v1
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check -recursive -diff
        continue-on-error: true
      - name: Configure Terraform state backend authentication
        run: |
          echo "ARM_ACCESS_KEY=${{secrets.ARM_ACCESS_KEY}}" >> "$GITHUB_ENV"
      - name: Terraform Init
        id: init
        run: terraform -chdir=prod init
      - name: Terraform Validate
        id: validate
        run: terraform -chdir=prod validate -no-color
      - name: Terraform Plan
        id: plan
        run: |
          terraform -chdir=prod plan -no-color \
          -var="git_repo_url=${{ github.server_url }}/${{ github.repository }}"
      - name: Create Comment with Terraform Plan
        uses: actions/github-script@v6
        id: comment
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Prod Format and Style 🖌 \`${{ steps.fmt.outcome }}\`
            #### Terraform Prod Initialization ⚙️ \`${{ steps.init.outcome }}\`
            #### Terraform Prod Validation 🤖 \`${{ steps.validate.outcome }}\`
            <details><summary>Prod Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Prod Plan 📖 \`${{ steps.plan.outcome }}\`

            <details><summary>Show Prod Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>`

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
