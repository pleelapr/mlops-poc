# This GitHub workflow deploys Terraform resources (ML resource config and more)
# defined under mlops-poc/terraform/prod, when PRs are merged into the release branch
name: Terraform Deployment for mlops-poc Prod

on:
  push:
    branches:
      - "release"
    paths:
      - "mlops-poc/terraform/**"
  workflow_dispatch:

permissions: write-all

defaults:
  run:
    working-directory: ./mlops-poc/terraform

jobs:
  prod:
    concurrency: mlops-poc-prod-terraform-job
    runs-on: ubuntu-20.04
    env:
      DATABRICKS_HOST: https://adb-8569209645075352.12.azuredatabricks.net
    steps:
      - uses: actions/checkout@v3
      - name: GET Databricks AAD Token
        run: |
          DATABRICKS_TOKEN=$(curl --fail -X POST -H 'Content-Type: application/x-www-form-urlencoded' \
                                              "https://login.microsoftonline.com/${{ secrets.prodAzureSpTenantId }}/oauth2/v2.0/token" \
                                              -d "client_id=${{ secrets.prodAzureSpApplicationId }}" \
                                              -d 'grant_type=client_credentials' \
                                              -d 'scope=2ff814a6-3304-4ab8-85cb-cd0e6f879c1d%2F.default' \
                                              -d "client_secret=${{ secrets.prodAzureSpClientSecret }}" |  jq -r  '.access_token')
          echo "DATABRICKS_TOKEN=$DATABRICKS_TOKEN" >> "$GITHUB_ENV"
      - name: AZ Login
        run: |
          az login --service-principal -u ${{ secrets.prodAzureSpApplicationId }} -p ${{ secrets.prodAzureSpClientSecret }} --tenant ${{ secrets.prodAzureSpTenantId }}
      - uses: hashicorp/setup-terraform@v1
      - name: Terraform fmt
        id: fmt
        env:
          ARM_CLIENT_ID: ${{ secrets.prodAzureSpApplicationId }}
          ARM_TENANT_ID: ${{ secrets.prodAzureSpTenantId }}
          ARM_CLIENT_SECRET: ${{ secrets.prodAzureSpClientSecret }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: terraform -chdir=prod fmt -check
        continue-on-error: true
      - name: Configure Terraform state backend authentication
        run: |
          echo "ARM_ACCESS_KEY=${{secrets.ARM_ACCESS_KEY}}" >> "$GITHUB_ENV"
      - name: Terraform Init
        id: init
        env:
          ARM_CLIENT_ID: ${{ secrets.prodAzureSpApplicationId }}
          ARM_TENANT_ID: ${{ secrets.prodAzureSpTenantId }}
          ARM_CLIENT_SECRET: ${{ secrets.prodAzureSpClientSecret }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: terraform -chdir=prod init
      - name: Terraform Validate
        id: validate
        env:
          ARM_CLIENT_ID: ${{ secrets.prodAzureSpApplicationId }}
          ARM_TENANT_ID: ${{ secrets.prodAzureSpTenantId }}
          ARM_CLIENT_SECRET: ${{ secrets.prodAzureSpClientSecret }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: terraform -chdir=prod validate
      - name: Terraform Plan
        id: plan
        run: |
          terraform -chdir=prod plan -no-color \
          -var="git_repo_url=${{ github.server_url }}/${{ github.repository }}"
      - name: Terraform Apply
        id: apply
        run: |
          terraform -chdir=prod apply -auto-approve \
          -var="git_repo_url=${{ github.server_url }}/${{ github.repository }}"
      - name: Terraform Output
        id: output
        run: terraform -chdir=prod output -json
      - name: Commit Terraform Output to File
        id: commit
        run: |
          git pull
          mkdir -p output
          echo '${{ steps.output.outputs.stdout }}' | jq '.' > output/prod.json
          git config --global user.name 'Terraform Output Github Workflow'
          git config --global user.email '<>'
          output=$(git status --porcelain)
          if [ -n "$output" ]
          then
            git add -A
            git commit -m "Commit prod output"
            git push
            git fetch origin release
            git checkout release
            git cherry-pick main
            git push
          fi
